<template>
  <modal :title="giveForm.name.length > 0 ? 'ÁºñËæë‰ªªÂä°' : 'Ê∑ªÂä†‰ªªÂä°'" v-model="show" @hide="$emit('close-model')" :footer="false">
    <formData ref="form" class="form-horizontal paddingRight al-addTask">
      <div class="form-group">
        <label class="col-xs-2" align="right">Âêç Áß∞</label>
        <div class="col-xs-10">
          <input type="text" v-model="form.name" class="form-control" placeholder="ËØ∑ËæìÂÖ•‰ªªÂä°ÂêçÁß∞" validate="required" fh="addtask_name">
        </div>
        <span class="falseHints" id="addtask_name"></span>
      </div>
      <div class="form-group">
        <label class="col-xs-2" align="right">Â±û ÊÄß</label>
        <div class="col-xs-9">
          <input type="text" class="form-control" placeholder="ËØ∑ËæìÂÖ•Â±ûÊÄßÂêçÁß∞"
            v-model="form.attr"
            @keyup.enter="addOne">
        </div>
        <div class="col-xs-1 al-addbox">
          <btn type="primary" @click="addOne">+</btn>
        </div>
      </div>
      <div class="form-group" v-for="(item, index) in form.attributes">
        <label class="col-xs-2" align="right"></label>
        <div class="col-xs-2">
          <select class="form-control" placeholder="ËØ∑ÈÄâÊã©‰ªªÂä°Á±ªÂûã" validate="required"
            v-model="item.type">
            <option v-for="obj in item.typeList" :value="obj.value">{{obj.text}}</option>
          </select>
        </div>
        <div class="col-xs-7">
          <input type="text" v-model="item.name" class="form-control" disabled>
        </div>
        <div class="col-xs-1 al-addbox">
          <a href="javascript:void(0)" @click="delOne(index)">
            <span class="glyphicon glyphicon-remove"></span>
          </a>
          <a href="javascript:void(0)" v-if="item.type > 2">
            <span class="glyphicon glyphicon-pencil"></span>
          </a>
        </div>
        <div class="col-xs-12 al-type-vlue" v-if="item.values.length > 0">
          <div class="">2222222222222</div>
        </div>
      </div>
      <div class="form-group">
        <label class="col-xs-2"></label>
        <div class="col-xs-10">
          <btn type="primary" @click="validate">Êèê ‰∫§</btn>
        </div>
      </div>
    </formData>
  </modal>
</template>
<script>
  import api from 'src/api'
  import formData from 'components/form/form.vue'
  export default {
    name: 'addTask',
    props: {
      giveForm: {
        type: Object
      }
    },
    data () {
      return {
        show: true,
        form: {
          name: '',              // -- ‰ªªÂä°ÂêçÁß∞
          attr: '',
          attributes: []         // -- ‰ªªÂä°Â±ûÊÄß
        },
        typeList: [{
          value: 1,
          text: 'Êñá Êú¨'
        }, {
          value: 3,
          text: 'Âçï ÈÄâ'
        }, {
          value: 4,
          text: 'Â§ö ÈÄâ'
        }, {
          value: 5,
          text: '‰∏ãÊãâÈÄâ'
        }, {
          value: 2,
          text: 'ÊñáÊú¨Âüü'
        }]
      }
    },
    components: {formData},
    created() {
      let vm = this
      if (vm.giveForm.name.length) Object.assign(vm.form, vm.giveForm)
    },
    methods: {
      addOne () {
        /**
         * Â±ûÊÄßÊ∑ªÂä†
         */
        let vm = this
        let name = vm.form.attr
        if (!name.length) {
          vm.notify('danger', 'ËØ∑Â°´ÂÜôÂ±ûÊÄßÂêçÁß∞')
          return
        }
        let num = 0
        vm.form.attributes.forEach(function (item) {
          if (item.name === name) num++
        })
        if (num) {
          vm.notify('danger', 'Ê≠§Â±ûÊÄßÂêçÁß∞Â∑≤Â≠òÂú®')
          return
        }
        let typeList = vm.typeList.map(function (item) {
          return item
        })
        let some = {name, type: 1, typeList, values: ''}
        vm.form.attributes.unshift(some)
      },
      delOne (index) {
        /**
         * Â±ûÊÄßÂà†Èô§
         */
        this.form.attributes.splice(index, 1)
      },
      validate () {
        /**
         * Ë°®ÂçïÈ™åËØÅ
         */
        let vm = this
        let fo = this.$refs.form.validate()
        if (!fo) return false
        if (!vm.form.attributes.length) {
          vm.notify('danger', 'ËØ∑Ê∑ªÂä†Ëá≥Â∞ë‰∏Ä‰∏™Â±ûÊÄßÂêçÁß∞')
          return
        }
        vm.doSubmit()
      },
      doSubmit () {
        /**
         * Êèê‰∫§Ê∑ªÂä†
         */
        let vm = this
        let url = '/taskType/insert'
        let params = JSON.stringify(vm.form)
        let text = 'Ê∑ªÂä†'
        if (vm.giveForm.name.length) {
          text = 'ÁºñËæë'
          url = '/taskType/update'
          let some = {id: vm.giveForm.id}
          Object.assign(some, vm.form)
          params = JSON.stringify(some)
        }
        console.log(`üëπ‰ªªÂä°${text}ÂèëÈÄÅÊï∞ÊçÆÔºö`, JSON.parse(params))
        api.post(url, params).then((res) => {
          console.log(`üëπ‰ªªÂä°${text}Êé•Êî∂Êï∞ÊçÆÔºö`, res)
          if (res.code !== 200) {
            vm.notify('danger', res.message)
            return
          }
          vm.$emit('close-model', 1)
        }).catch((error) => {
          console.log(error)
        })
      },
      notify(type, content) {
        /**
         * Â∞ÅË£Ö‰∏Ä‰∏™ÂºπÂá∫Ê∂àÊÅØ
         * param {String} type Á±ªÂûã
         * param {String} content ÂÜÖÂÆπ
         */
        this.$notify({ type, content, dismissible: false, duration: 1000 })
      }
    }
  }
</script>
<style lang="less">
.paddingRight {
  padding-right: 50px !important
}
.al-addTask {
  label {
    line-height: 34px
  }
  .form-group {
    .al-addbox {
      padding: 0;
      a {
        display: inline-block;
        height: 34px;
        line-height: 34px;
        margin-left: 2px;
      }
    }
    .al-type-vlue {
      padding-left: 182px;
      height: 34px;
      line-height: 34px;
      color: #337ab7;
    }
  }
  .col-xs-2 {
    padding-left: 0
  }
  .col-xs-6 {
    padding-left: 0
  }
  .col-xs-7 {
    padding-left: 0
  }
  .col-xs-9 {
    padding-left: 0
  }
  .col-xs-10 {
    padding-left: 0
  }
}
</style>
