const fs = require('fs')
const path = require('path')
const express = require('express')
const favicon = require('serve-favicon')
const cookieParser = require('cookie-parser')
const resolve = file => path.resolve(__dirname, file)
const proxyMiddleware = require('http-proxy-middleware')
const isProd = process.env.NODE_ENV === 'production'

const app = express()

let renderer
if (isProd) {
  // 生产环境使用本地打包文件来渲染
  const bundle = require('./dist/vue-ssr-bundle.json')
  const template = fs.readFileSync(resolve('./dist/index.html'), 'utf-8')
  renderer = createRenderer(bundle, template)
} else {
  // 开发环境使用webpack热更新服务
  require('./build/dev-server')(app, (bundle, template) => {
    renderer = createRenderer(bundle, template)
  })
}

function createRenderer(bundle, template) {
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    template,
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})


// 暂时弃用
const proxyTable = {
  '/mcp': {
    target: 'http://mcp.aldbim.com',
    changeOrigin: true
  },
  '/map': {
    target: 'http://map.art1001.com',
    changeOrigin: true,
    pathRewrite: {
      '^/map': '/ald/api/v1'
    }
  }
}

// 客户端跨域
Object.keys(proxyTable).forEach(function(context) {
  var options = proxyTable[context]
  if (typeof options === 'string') {
    options = { target: options }
  }
  // app.use(proxyMiddleware(options.filter || context, options))
})

const v = Date.now()
// cookie 解析中间件
app.use(cookieParser())
app.use('/dist', serve('./dist', true))
app.use(favicon(path.resolve(__dirname, 'src/assets/images/logo.jpg')))
app.use('/service-worker.js', serve('./dist/service-worker.js'))
app.use(express.static(path.join(__dirname, 'public')))

app.get('*', (req, res) => {
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.header('Access-Control-Allow-Origin', '*')
  res.header('Access-Control-Allow-Headers', 'Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild, x-access-token')
  res.header('Access-Control-Allow-Methods', 'PUT, POST, GET, DELETE, OPTIONS')
  res.header('Access-Control-Allow-Credentials', 'true')

  const errorHandler = err => {
    if (err && err.code === 404) {
      res.status(404).sendfile('public/404.html');
    } else {
      // 页面渲染错误
      res.status(500).end('500 - Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err)
    }
  }

  let title
  switch (req.url) {
    case '/':
      title = '首页'
      break;
    case '/user':
      title = '用户'
      break;
    case '/citys':
      title = '地区'
      break;
    case '/about':
      title = '我的'
      break;
    case '/login':
      title = '登录'
      break;
    default:
      title = ''
  }

  const context = { title, version: v, url: req.url, cookies: req.cookies }

  renderer.renderToString(context, (err, html) => {
    if (err) {
      return errorHandler(err)
    }
    res.end(html)
    console.log(`whole request: ${Date.now() - s}ms`)
  })

  // renderer.renderToStream(context)
  //   .on('error', errorHandler)
  //   .on('end', () => console.log(`请求耗时: ${Date.now() - s}ms`))
  //   .pipe(res)
})

const port = process.env.PORT || 8080
app.listen(port, () => {
  console.log(`server started at http://localhost:${port}`)
})
