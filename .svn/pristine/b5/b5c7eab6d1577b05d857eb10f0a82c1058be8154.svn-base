<template>
  <div>
    <div class="featurebar">
      <ul class="ul">
        <li>
          <b>建任务</b>
        </li>
      </ul>
    </div>
    <div class="main">
      <formData ref="form" class="form-horizontal">
        <div class="form-group">
          <label class="col-sm-2 control-label">任务类型</label>
          <div class="col-sm-5">
            <selectData k="id" v="name" v-model="item.typeId" :data="typeList" :searchShow="true" @change="selectChange">
            </selectData>
          </div>
        </div>
        <div class="form-group" v-for="(x, t) in attributes">
          <label class="col-sm-2 control-label">{{x.name}}</label>
          <div class="col-sm-5">
            <input type="text" class="form-control" v-model="x.value" validate="required">
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label">指派给</label>
          <div class="col-sm-5">
            <selectData :data="taskMan" k="memberId" v="memberName" v-model="item.memberId" :searchShow="true"></selectData>
          </div>
          <!--<select class="form-control" v-model="item.assignedId" validate="required">-->
          <!--<option v-for="i in typeList.data.team" :value="i.memberId">{{i.memberName}}</option>-->
          <!--</select>-->
        </div>
        <!--<div class="form-group">-->
        <!--<label>相关需求</label>-->
        <!--<input type="text" class="form-control" id="exampleInputName2">-->
        <!--</div>-->
        <div class="form-group">
          <label class="col-sm-2 control-label">任务名称</label>
          <div class="col-sm-5">
            <input type="text" class="form-control" v-model="item.name" validate="required">
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label">预计</label>
          <div class="col-sm-5">
            <div class="input-group ">
              <input type="text" class="form-control" v-model="item.planTime" validate="required|number">
              <label class="input-group-addon">小时</label>
            </div>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label">开始时间</label>
          <div class="col-sm-5">
            <dateTime v-model="item.startTime" validate="required"></dateTime>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label">结束时间</label>
          <div class="col-sm-5">
            <dateTime v-model="item.endTime" validate="required"></dateTime>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label">优先级</label>
          <div class="col-sm-5">
            <selectData :data="priority" v="id" v-model="item.priority"></selectData>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label">任务描述</label>
          <!--<textarea type="text" class="form-control" v-model="item.content" validate="required"></textarea>-->
          <div class="col-sm-10">
            <editor v-model="item.content"></editor>
          </div>
        </div>
        <div class="form-group">
          <label class="col-sm-2 control-label"></label>
          <div class="col-sm-10">
            <button type="button" @click="submit" class="btn btn-primary btn-sm">
              <template v-if="!loading">保存</template>
              <i v-if="loading" class="fa fa-circle-o-notch fa-spin"></i>
            </button>
            <button type="button" @click="back" class="btn btn-default btn-sm">返回</button>
          </div>
        </div>
      </formData>
    </div>
  </div>
</template>
<script>
import { mapGetters } from 'vuex'
import api from 'src/api'
import formData from 'components/form/form.vue'
import dateTime from 'components/form/dateTime.vue'
import editor from 'components/editor/editor.vue'
import selectData from 'components/form/select.vue'

export default {
  name: 'Project',
  data() {
    return {
      loading: false,
      currentPage: 2,
      attributes: [],
      priority: [{ id: 1 }, { id: 2 }, { id: 3 }],
      item: {
        typeId: '',
        name: '',
        content: '',
        priority: '',
        projectId: this.$route.params.id,
        values: []
      }
    }
  },
  computed: {
    ...mapGetters({
      typeList: 'projectTaskTypeList',
      taskMan: 'projectTaskMan'
    })
  },
  mounted() {
    console.log('typeList', this.typeList, this.taskMan)
  },
  components: { formData, editor, selectData, dateTime },
  asyncData({ store, route }) {
    return Promise.all([store.dispatch('isProjectTaskType'), store.dispatch('isProjectTaskMan', { projectId: route.params.id })])
  },
  methods: {
    selectChange(opt) {
      let vm = this
      vm.attributes = []
      console.log(opt, vm.typeList)
      vm.typeList.forEach(function(item) {
        if (opt === item.id) {
          vm.attributes = item.attributes
        }
      })
      vm.attributes.forEach(function(item) {
        item.attributeId = item.id
        item.value = ''
      })
      console.log(vm.attributes)
    },
    back() {
      this.$router.push('/project/task/' + this.item.projectId)
    },
    submit() {
      let fo = this.$refs.form.validate()
      if (!fo && this.item.memberId) return false
      this.item.id = this.$uuid()
      let num = 0
      this.attributes.forEach(function(org) {
        if (org.value.length) num++
      })
      if (num < this.attributes.length) {
        this.notify('danger', '任务内容请添加完全')
        return
      }
      if (!this.item.memberId || !this.item.memberId.length) {
        this.notify('danger', '请选择指派给谁')
        return
      }
      this.item.values = this.attributes
      this.loading = true
      console.log(this.item)
      api.post('/task/insert', JSON.stringify(this.item)).then((response) => {
        this.loading = false
        if (response.code === 200) {
          this.$alert({
            title: '提示',
            okText: '确定',
            content: '添加成功'
          }).then(() => {
            this.$router.push('/project/task/' + this.item.projectId)
          })
        } else {
          this.$notify(response.message)
        }
      })
    },
    notify(type, content) {
      /**
       * 封装一个弹出消息
       * param {String} type 类型
       * param {String} content 内容
       */
      this.$notify({ type, content, dismissible: false, duration: 1000 })
    }
  }
}

</script>
<style lang="less">
.form-task {
  .row {
    margin: 0;
  }
  .form-group {
    padding: 5px 0;
    display: table;
    .form-group {
      padding: 0;
    }
    label {
      display: table-cell;
      width: 100px;
      text-align: right;
      font-size: 12px;
      font-weight: bold;
      line-height: 30px;
      padding: 0 10px;
      vertical-align: top;
    }
    .input-group-addon {
      line-height: 28px;
    }
    input.form-control,
    select.form-control {
      min-width: 295px;
      display: table-cell;
    }
    .form-control.w-150 {
      min-width: 150px;
      width: 150px;
    }
    textarea.form-control {
      width: 100%;
      display: table-cell;
      min-height: 150px;
    }
    .input-group-addon {
      font-size: 12px;
      font-weight: bold;
    }
    .fix-border {
      border-left: 0;
      border-right: 0;
    }
  }
}

</style>
