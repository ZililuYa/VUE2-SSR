<template>
    <div class="">
      <div class="invite-wrap">
        <!-- <form class=""> -->
          <div class="form-group has-feedback invite-search">
            <label for="" class="col-sm-2 control-label">账号</label>
            <div class="col-sm-7">
              <input type="text" v-model="searchData" class="form-control" placeholder="用户账号(手机号)" @blur="doSearch">
            </div>
            <div class="col-sm-3">
              <btn type="primary" @click="getCode" :disabled="isDisabled">{{btnText}}</btn>
            </div>
          </div>
          <div class="form-group">
            <label for="" class="col-sm-2 control-label">验证码</label>
            <div class="col-sm-7">
              <input type="text" v-model="verifyCode" class="form-control">
            </div>
          </div>
          <div class="pull-center-footer">
            <btn type="primary" @click="validateCode">邀请</btn>
            <!-- <btn type="primary">返回</btn> -->
          </div>
        <!-- </form> -->
      </div>
    </div>
</template>
<script>
  import { mapGetters, mapActions } from 'vuex'
  import api from 'src/api'
  export default {
    data () {
      return {
        searchUser: {},
        searchData: '',
        verifyCode: '',
        btnText: '获取验证码',
        isDisabled: false,
        doShow: false,
        codeModal: false,
        codeImg: ''
      }
    },
    props: {
    },
    computed: {
      ...mapGetters({
        // userList: 'getUserList' // 用户查询结果
      })
    },
    methods: {
      ...mapActions([
        'doUserList'
      ]),
      doSearch () {
        /**
         * 搜索用户
         */
        console.log('搜索')
        let vm = this
        api.post('/member/selectBymobile', {mobile: vm.searchData.trim()}).then((response) => {
          console.log('搜索用户', response)
          vm.searchUser = response.data
          if (vm.searchUser && vm.searchUser.id) {
            vm.sendCode()
          } else {
            vm.$alert({
              title: '提示',
              content: '用户不存在'
            }).then(() => {
            })
          }
        }).catch((error) => {
          console.log(error)
        })
      },
      getCode () {
        /**
         * 获取验证码验证
         */
        let vm = this
        if (vm.searchData.trim()) {
          vm.doSearch()
        } else {
          vm.$alert({
            title: '提示',
            content: '请输入用户账号'
          }).then(() => {
          })
          return false
        }
      },
      sendCode () {
        /**
         * 获取验证码
         */
        let vm = this
        api.post('/sms/send', {mobile: vm.searchData.trim()}).then((response) => {
          if (response.code === 200) {
            console.log('获取验证码成功')
            vm.isDisabled = true
            // 读秒倒计时
            vm.btnText = '60s'
            let numTime = 60
            let deleteTime = () => {
              if (vm.btnText !== '1s' && numTime > 0) {
                numTime--
                vm.btnText = numTime + 's'
              } else {
                window.clearInterval(setCode)
                vm.btnText = '获取验证码'
                vm.isDisabled = false
                numTime = 60
              }
            }
            var setCode = window.setInterval(deleteTime, 1000)
          } else {
            vm.notify('danger', response.message)
          }
        }).catch((error) => {
          console.log(error)
        })
      },
      validateCode () {
        /**
         * 验证验证码
         */
        let vm = this
        if (vm.searchData.trim() && vm.verifyCode.trim()) {
          api.post('/sms/checkCode', {mobile: vm.searchData.trim(), verifyCode: vm.verifyCode.trim()}).then((response) => {
            if (response.code === 200) {
              console.log('验证验证码')
              vm.doSubmit()
            } else {
              vm.notify('danger', response.message)
            }
          }).catch((error) => {
            console.log(error)
          })
        } else {
          vm.$alert({
            title: '提示',
            content: '请输入账号和验证码'
          }).then(() => {
          })
        }
      },
      doSubmit () {
        /**
         * 提交添加
         */
        let vm = this
        let param = {
          userId: vm.searchUser.id
        }
        api.post('/companyUser/add', param).then((response) => {
          this.$emit('close-model')
          vm.doClean()
          if (response.code === 200) {
            vm.doUserList()
            vm.notify('success', '邀请成功')
          } else {
            vm.notify('danger', response.message)
          }
        }).catch((error) => {
          console.log(error)
        })
      },
      doClean () {
        /**
         * 清空
         */
        this.searchData = ''
        this.verifyCode = ''
        this.isDisabled = true
        this.doShow = false
      },
      notify(type, content) {
        /**
         * 封装一个弹出消息
         * param {String} type 类型
         * param {String} content 内容
         */
        this.$notify({ type, content, dismissible: false, duration: 1000 })
      }
    }
  }
</script>
<style lang="less">
.invite-wrap {
  line-height: 34px;
  margin: 0 auto;
  overflow: hidden;
  clear: both;
  .invite-head {
    overflow: hidden;
  }
  .form-group {
    overflow: hidden;
    margin-top:15px;
  }
}
.invite-result {
  padding:15px 0;
  min-height: 80px;
  .img-search {
    display: block;
    max-height: 72px;
    max-width: 72px;
    margin: 0 auto;
  }
  .txt-search {
    margin-top: 20px;
    font-size: 18px;
    text-align: center;
    color: #a6a6a6;
  }
  .result-item {
    div {
      float: left;
      margin-right:15px;
      line-height: 30px;
    }
    .search-avatar {
      width: 30px;
      height:30px;
      border-radius: 50%;
      overflow: hidden;
      img {
        width:100%;
      }
    }
  }
}
.pull-center-footer {
  clear: both;
  text-align: center;
}
</style>
