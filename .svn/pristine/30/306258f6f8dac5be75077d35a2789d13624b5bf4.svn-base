<template>
  <div>
    <div class="featurebar">
      <ul class="ul">
        <li :class="i.value === param.status ? 'active' : ''" v-for="i in statusList" @click="param.status=i.value,tableChange()"><a href="javascript:;">{{i.text}}</a></li>
      </ul>
    </div>
    <div class="main">
      <dataTable ref="table" :tool="tool" :data="state.data" :page="state.page" @pageChange="tableChange" :columns="columns"></dataTable>
    </div>
  </div>
</template>

<script>
  import { mapGetters, mapActions } from 'vuex'
  import dataTable from 'components/table/table.vue'
  import api from 'src/api'

  export default {
    name: 'Project',
    data () {
      return {
        statusList: this.$projectStatus,
        tool: [{
          text: 'Âà†Èô§',
          click: (data) => {
            console.log('Ë¶ÅÊâπÈáèÂà†Èô§ÁöÑÊï∞ÊçÆ', data)
            this.deleAll(data)
          }
        }],
        columns: [{
          type: 'selection'
        }, {
          text: 'È°πÁõÆÂêçÁß∞',
          // key: 'name',
          width: 300,
          render: function (h, row) {
            return h('a', {
              attrs: {
                href: 'javascript:;'
              },
              on: {
                click: () => {
                  window.sessionStorage.setItem('pid', row.id)
                  window.sessionStorage.setItem('pname', row.name)
                  window.location.href = '/project/task/' + row.id
                  // cookies.set('p_db', { id: row.id, name: row.name })
                  // vm.$router.push(`/project/survey/${row.id}`)
                }
              }
            }, row.name)
          }
        }, {
          text: 'È°πÁõÆ‰ª£Âè∑',
          key: 'code'
        }, {
          text: 'È°πÁõÆË¥üË¥£‰∫∫',
          key: 'chargeName'
        }, {
          text: 'ÁªìÊùüÊó•Êúü',
          key: 'endTime',
          render: function (h, row) {
            return h('span', {}, row.endTime ? new Date(row.endTime).Format('yyyy-MM-dd') : '')
          }
        }, {
          text: 'È°πÁõÆÁä∂ÊÄÅ',
          key: 'status',
          render: (h, row) => {
            for (let i of this.statusList) {
              if (i.value === row.status) {
                return h('span', {}, i.text)
              }
            }
          }
        }, {
          text: 'ÊÄªÈ¢ÑËÆ°',
          key: 'totalPlan'
        }, {
          text: 'ÊÄªËÄóÊó∂',
          key: 'totalUse'
        }, {
          text: 'ÊÄªÂâ©‰Ωô',
          key: 'totalLeft'
        }, {
          text: 'ËøõÂ∫¶',
          render: function (h, row) {
            return h('progress-bar', {
              props: {
                value: parseInt(row.percent)
              },
              style: {
                marginBottom: '0px'
              },
              attrs: {
                label: true
              }
            })
          }
        }],
        param: {
          pageSize: 20,
          pageIndex: 1,
          status: ''
        }
      }
    },
    computed: {
      ...mapGetters({
        state: 'projectState'
      })
    },
    mounted () {
      console.log('ÊúçÂä°Á´ØÊé•Êî∂Âà∞ÁöÑÊï∞ÊçÆÔºö', this.state)
    },
    components: {dataTable},
    asyncData ({store}) {
      return store.dispatch('isProjectState')
    },
    methods: {
      ...mapActions(['isProjectState']),
      tableChange (data) {
        this.$refs.table.loading = true
        if (data) this.param.pageIndex = data
        this.isProjectState(this.param)
      },
      deleAll (data) {
        if (!data.length) return
        let vm = this
        let ids = ''
        let name = ''
        data.forEach(function (item) {
          ids = `${ids}${item.id},`
          name = `${name}${item.name},`
        })
        ids = ids.substring(0, ids.length - 1)
        name = name.substring(0, name.length - 1)
        api.post('/project/delete', {ids, name}).then((res) => {
          if (res.code !== 200) {
            vm.notify('danger', res.message)
            return
          }
          console.log('üëπÈ°πÁõÆÂà†Èô§ËøîÂõûÊï∞ÊçÆÔºö', res)
          vm.isProjectState(this.param)
        }).catch((error) => {
          console.log(error)
        })
      },
      notify (type, content) {
        /**
         * Â∞ÅË£Ö‰∏Ä‰∏™ÂºπÂá∫Ê∂àÊÅØ
         * param {String} type Á±ªÂûã
         * param {String} content ÂÜÖÂÆπ
         */
        this.$notify({type, content, dismissible: false, duration: 1000})
      }
    }
  }
</script>

<style lang="less">
  .main {
    padding: 20px;
  }

  .featurebar {
    display: block;
    width: 100%;
    font-size: 14px;
    background: #ebf1f9;
    border-bottom: 1px solid #ddd;
    line-height: 30px;
    min-height: 46px;
    .ul {
      margin: 0;
      padding: 8px 13px;
      li {
        float: left;
        line-height: 30px;
        a {
          color: #141414;
          display: block;
          padding: 0 7px;
          text-decoration: none;
          font-size: 13px;
          transition: all 0.3s;
          &:hover {
            background-color: rgb(221, 221, 221);
          }
        }
        &.active {
          font-weight: bold;
        }
      }
    }
  }
</style>
