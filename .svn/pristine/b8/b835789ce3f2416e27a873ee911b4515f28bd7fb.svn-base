import api from 'src/api'

const state = {
  list: {},
  detail: {},
  taskList: {},
  teamList: {},
  projectTypeList: {},
  projectTaskTypeList: {}
}

const getters = {
  projectState: state => state.list,
  projectSurvey: state => state.detail,
  projectTaskList: state => state.taskList,
  projectTeamList: state => state.teamList,
  projectTypeList: state => state.projectTypeList,
  projectTaskTypeList: state => state.projectTaskTypeList
}

const mutations = {
  SET: (state, data) => {
    state[data.key] = data.data
  },
  SET_DATA: (state, data) => {
    state.list.data = data.data
    state.list.page = {
      total: data.total,
      totalPage: Math.ceil(data.total / 20),
      pageIndex: data.current,
      pageSize: 20
    }
  },
  SET_TASK: (state, data) => {
    state.taskList = data
    state.taskList.page = {
      total: data.total,
      totalPage: Math.ceil(data.total / 20),
      pageIndex: data.current,
      pageSize: 20
    }
  },
  SET_TEAM: (state, data) => {
    state.teamList = data
    state.teamList.page = {
      total: data.total,
      totalPage: Math.ceil(data.total / 20),
      pageIndex: data.current,
      pageSize: 20
    }
  }
}

const actions = {
  isProjectTaskType ({state, commit}, parameter = {}) {
    return api.post('/v1/task/teamType', parameter).then((response) => {
      commit('SET', {key: 'projectTaskTypeList', data: response})
    })
  },
  isProjectType ({state, commit}, parameter = {}) {
    return api.post('/v1/dict/pager', parameter).then((response) => {
      commit('SET', {key: 'projectTypeList', data: response})
    })
  },
  isProjectTeam ({state, commit}, parameter = {}) {
    if (!parameter.projectId) {
      return
    }
    return api.post('/v1/team/pager', parameter).then((res) => {
      commit('SET_TEAM', res)
    }).catch((error) => {
      console.log(error)
    })
  },
  isProjectTask ({state, commit}, parameter = {}) {
    if (!parameter.projectId) {
      return
    }
    return api.post('/v1/task/pager', parameter).then((res) => {
      commit('SET_TASK', res)
    }).catch((error) => {
      console.log(error)
    })
  },
  isProjectSurvey ({state, commit}, id) {
    if (!id) {
      return
    }
    return api.post('/v1/project/detail', {id}).then((response) => {
      commit('SET', {key: 'detail', data: response.data})
    }).catch((error) => {
      console.log(error)
    })
  },
  isProjectState ({state, commit}, parameter = {pageSize: 20}) {
    let data = {
      current: 1,
      total: 0,
      data: []
    }
    // commit('SET_DATA', data)
    return api.post('/v1/project/pager', parameter).then((res) => {
      commit('SET_DATA', res.code === 401 ? data : res)
      // commit('SET_DATA', res)
    }).catch((error) => {
      console.log(error)
    })
  }
}

export default {
  state,
  getters,
  mutations,
  actions
}
